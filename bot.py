import asyncio
import os
import aiohttp
import logging
import time
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import Command
from dotenv import load_dotenv
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.keys import Keys
from webdriver_manager.chrome import ChromeDriverManager
from django.conf import settings
from asgiref.sync import sync_to_async
import django

# –ù–∞—Å—Ç—Ä–æ–∏–º Django
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "config.settings")
django.setup()

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å MESSAGE
from main.models import MESSAGE

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)


def fetch_page_data(url):
    """–§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É, –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    options = webdriver.ChromeOptions()
    options.add_argument("--headless")  # –ë–µ–∑ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--disable-blink-features=AutomationControlled")
    options.add_argument("--ignore-certificate-errors")
    options.add_argument("--disable-popup-blocking")
    options.add_argument("--disable-web-security")
    options.add_argument("--disable-features=IsolateOrigins,site-per-process")
    options.add_argument("--disable-site-isolation-trials")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º "—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π" User-Agent
    options.add_argument(
        "user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36"
    )

    driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
    logging.info(f"–û—Ç–∫—Ä—ã–≤–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É: {url}")
    driver.get(url)

    # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    time.sleep(10)

    # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–Ω–∏–∑ (–µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ)
    for _ in range(5):
        ActionChains(driver).send_keys(Keys.END).perform()
        time.sleep(1)

    # 1Ô∏è‚É£ –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    full_text = driver.execute_script("return document.body.innerText")

    # 2Ô∏è‚É£ –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫
    text_blocks = [el.text for el in driver.find_elements(By.TAG_NAME, "div") if el.text.strip()]
    longest_text = max(text_blocks, key=len, default="")  # –ë–µ—Ä–µ–º —Å–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π

    # –ï—Å–ª–∏ –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, –±–µ—Ä–µ–º —Ç–µ–∫—Å—Ç –∏–∑ div
    page_text = longest_text if len(longest_text) > 100 else full_text

    # 3Ô∏è‚É£ –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    images = []
    for img in driver.find_elements(By.TAG_NAME, "img"):
        img_url = img.get_attribute("src")
        if img_url and img_url.startswith("http"):
            images.append(img_url)
        if len(images) >= 10:
            break

    driver.quit()
    logging.info(f"–¢–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã (200 —Å–∏–º–≤–æ–ª–æ–≤): {page_text[:200]}...")
    logging.info(f"–ù–∞–π–¥–µ–Ω–æ {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    return page_text, images


@sync_to_async
def save_message_to_db(text, images):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Django-–º–æ–¥–µ–ª—å"""
    return MESSAGE.objects.create(text=text, images=images)


async def download_images(images):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Å—ã–ª–∫–∏ –≤ –ë–î"""
    async with aiohttp.ClientSession() as session:
        filenames = []
        for index, img_url in enumerate(images):
            async with session.get(img_url) as response:
                if response.status == 200:
                    filenames.append(img_url)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –≤–º–µ—Å—Ç–æ —Ñ–∞–π–ª–æ–≤
        return filenames


@dp.message(Command("start"))
async def start_handler(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É, –∏ —è —Å–æ—Ö—Ä–∞–Ω—é —Ç–µ–∫—Å—Ç –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")


@dp.message()
async def message_handler(message: Message):
    url = message.text.strip()
    await message.answer("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    text, images = fetch_page_data(url)
    if not text and not images:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image_urls = await download_images(images)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await save_message_to_db(text, image_urls)

    await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ!")


async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
